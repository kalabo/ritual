//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ritual.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RitualDBEntities : DbContext
    {
        public RitualDBEntities()
            : base("name=RitualDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<Membership> Memberships { get; set; }
        public virtual DbSet<MembershipState> MembershipStates { get; set; }
        public virtual DbSet<MembershipSuspension> MembershipSuspensions { get; set; }
        public virtual DbSet<OpeningHour> OpeningHours { get; set; }
        public virtual DbSet<PackageLocationPrice> PackageLocationPrices { get; set; }
        public virtual DbSet<QuarterlyAssessment> QuarterlyAssessments { get; set; }
        public virtual DbSet<SessionBooking> SessionBookings { get; set; }
        public virtual DbSet<SessionBookingState> SessionBookingStates { get; set; }
        public virtual DbSet<TimeSlot> TimeSlots { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<OpeningHourOverride> OpeningHourOverrides { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<NewsCategory> NewsCategories { get; set; }
        public virtual DbSet<PackageType> PackageTypes { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<InitialAssessment> InitialAssessments { get; set; }
        public virtual DbSet<ClientIssuesFeedback> ClientIssuesFeedbacks { get; set; }
        public virtual DbSet<RitualLookup> RitualLookups { get; set; }
    
        public virtual ObjectResult<GetImminentSessionBookings_Result> GetImminentSessionBookings(Nullable<int> locationId, Nullable<System.DateTime> currentDateTime)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var currentDateTimeParameter = currentDateTime.HasValue ?
                new ObjectParameter("CurrentDateTime", currentDateTime) :
                new ObjectParameter("CurrentDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImminentSessionBookings_Result>("GetImminentSessionBookings", locationIdParameter, currentDateTimeParameter);
        }
    
        public virtual ObjectResult<GetUpcomingBookingSlots_Result> GetUpcomingBookingSlots(Nullable<int> locationId, Nullable<System.DateTime> currentDateTime, Nullable<int> memberID)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(int));
    
            var currentDateTimeParameter = currentDateTime.HasValue ?
                new ObjectParameter("CurrentDateTime", currentDateTime) :
                new ObjectParameter("CurrentDateTime", typeof(System.DateTime));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUpcomingBookingSlots_Result>("GetUpcomingBookingSlots", locationIdParameter, currentDateTimeParameter, memberIDParameter);
        }
    }
}
